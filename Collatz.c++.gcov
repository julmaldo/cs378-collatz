        -:    0:Source:Collatz.c++
        -:    0:Graph:Collatz.gcno
        -:    0:Data:Collatz.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// ----------------------------
        -:    2:// projects/collatz/Collatz.c++
        -:    3:// Copyright (C) 2015
        -:    4:// Glenn P. Downing
        -:    5:// ----------------------------
        -:    6:
        -:    7:// --------
        -:    8:// includes
        -:    9:// --------
        -:   10:
        -:   11:#include <cassert>  // assert
        -:   12:#include <iostream> // endl, istream, ostream
        -:   13:#include <sstream>  // istringstream
        -:   14:#include <string>   // getline, string
        -:   15:#include <utility>  // make_pair, pair
        -:   16:
        -:   17:#include "Collatz.h"
        -:   18:
        -:   19:using namespace std;
        -:   20:
        -:   21:// ------------
        -:   22:// collatz_read
        -:   23:// ------------
        -:   24:
function _Z12collatz_readRKSs called 6 returned 100% blocks executed 80%
        6:   25:pair<int, int> collatz_read (const string& s) {
        6:   26:    istringstream sin(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   27:    int i;
        -:   28:    int j;
        6:   29:    sin >> i >> j;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        6:   30:    return make_pair(i, j);}
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -:   31:
        -:   32:// ------------
        -:   33:// collatz_eval
        -:   34:// ------------
        -:   35:
function _Z12collatz_evalii called 9 returned 100% blocks executed 94%
        9:   36:int collatz_eval (int i, int j) {
        -:   37:    // <your code>
        9:   38:int first=0; int last=0;
        9:   39:if (i<=j) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        9:   40:	 first = i; last = j;
        -:   41:} 
        -:   42:else { 
    #####:   43:	first = j; last = i;
        -:   44:} 
        9:   45:if (last/2 >first){
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
        2:   46:	first=last/2;
        -:   47:}
        -:   48:
        9:   49:int High = 0;
      446:   50:for ( int a = first; a <= last; a= a+1)
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
        -:   51:{
      437:   52:	int temp = 1; 
      437:   53:	int b = a;
    25979:   54:	while (b != 1){
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
    25105:   55:		if (b%2 ==0) {
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
    16838:   56:			b = b/2;
    16838:   57:			temp++;
        -:   58:		}	
        -:   59:		else {
     8267:   60:			b=b *3+1;
     8267:   61:			temp++;
        -:   62:		}
        -:   63:	}
        -:   64:
        -:   65:
      437:   66:	if (temp >= High){
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
       71:   67:		High = temp;
        -:   68:	}
        -:   69:}
        9:   70:    return High;
        -:   71:}
        -:   72:
        -:   73:// -------------
        -:   74:// collatz_print
        -:   75:// -------------
        -:   76:
function _Z13collatz_printRSoiii called 9 returned 100% blocks executed 100%
        9:   77:void collatz_print (ostream& w, int i, int j, int v) {
        9:   78:    w << i << " " << j << " " << v << endl;}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
call    3 returned 100%
call    4 returned 100%
call    5 returned 100%
        -:   79:
        -:   80:// -------------
        -:   81:// collatz_solve
        -:   82:// -------------
        -:   83:
function _Z13collatz_solveRSiRSo called 2 returned 100% blocks executed 80%
        2:   84:void collatz_solve (istream& r, ostream& w) {
        2:   85:    string s;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        9:   86:    while (getline(r, s)) {
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
branch  6 taken 71%
branch  7 taken 29% (fallthrough)
        5:   87:        const pair<int, int> p = collatz_read(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        5:   88:        const int            i = p.first;
        5:   89:        const int            j = p.second;
        5:   90:        const int            v = collatz_eval(i, j);
call    0 returned 100%
function _GLOBAL__sub_I__Z12collatz_readRKSs called 1 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 1 returned 100% blocks executed 100%
       10:   91:        collatz_print(w, i, j, v);}}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
call    5 returned 100%
branch  6 taken 100% (fallthrough)
branch  7 taken 0% (throw)
call    8 returned 100%
call    9 never executed
